<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wargame on SooHo&#39;s Blog</title>
    <link>https://appealso.github.io/categories/wargame/</link>
    <description>Recent content in Wargame on SooHo&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 26 Oct 2022 17:08:44 +0900</lastBuildDate><atom:link href="https://appealso.github.io/categories/wargame/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>pwnable.kr input</title>
      <link>https://appealso.github.io/p/pwnable.kr-input/</link>
      <pubDate>Wed, 26 Oct 2022 17:08:44 +0900</pubDate>
      
      <guid>https://appealso.github.io/p/pwnable.kr-input/</guid>
      <description>문제를 접속하면 아래의 파일이 주어진다. 우선 c파일을 열어보자. 열어보면 총 5개의 stage를 넘어가야하는데. 입력값을 코드에 맞춰 넘겨주면 된다. 각 스테</description>
    </item>
    
    <item>
      <title>pwnable.kr random</title>
      <link>https://appealso.github.io/p/pwnable.kr-random/</link>
      <pubDate>Tue, 25 Oct 2022 09:55:13 +0900</pubDate>
      
      <guid>https://appealso.github.io/p/pwnable.kr-random/</guid>
      <description>Write-up 처음 접속을 하면 아래의 코드가 주어진다. 코드를 해석해보면 key와 random을 xor연산하여 0xdeadbeef 와 값이 동일하면 플래그가 출력되도록 되어있다. random@pwnable:~$ ls flag</description>
    </item>
    
    <item>
      <title>pwnable.kr passcode</title>
      <link>https://appealso.github.io/p/pwnable.kr-passcode/</link>
      <pubDate>Mon, 24 Oct 2022 10:57:54 +0900</pubDate>
      
      <guid>https://appealso.github.io/p/pwnable.kr-passcode/</guid>
      <description>접속을 하면 아래와 같은 링크가 주어진다. ssh passcode@pwnable.kr -p2222 ls를 쳐보면 아래와 같이 3가지 파일이 주어지는 c 파일을 먼저 열어 보았다. passcode@pwnable:~$ ls flag passcode passcode.c // passcode.c #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt; void login(){ int passcode1; int passcode2;</description>
    </item>
    
    <item>
      <title>pwnable.kr cmd2</title>
      <link>https://appealso.github.io/p/pwnable.kr-cmd2/</link>
      <pubDate>Sat, 22 Oct 2022 10:19:30 +0900</pubDate>
      
      <guid>https://appealso.github.io/p/pwnable.kr-cmd2/</guid>
      <description>주어진 링크에 접속하여 파일을 확인해보면 아래와 같은 파일이 주어진다. 이중에서 c파일을 열면 아래와 같은 내용을 확인 할 수 있다. cmd2@pwnable:~$ ls cmd2 cmd2.c flag cmd2@pwnable:~$ cat cmd2.c #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;string.h&amp;gt; int filter(char* cmd){</description>
    </item>
    
    <item>
      <title>pwnable.kr cmd1</title>
      <link>https://appealso.github.io/p/pwnable.kr-cmd1/</link>
      <pubDate>Sat, 22 Oct 2022 10:16:43 +0900</pubDate>
      
      <guid>https://appealso.github.io/p/pwnable.kr-cmd1/</guid>
      <description>주어진 경로에 접속하면 아래와 같이 3가지 파일이 주어진다. 이 중 C파일을 실행하면 아래와 같은 내용의 소스코드를 확인할 수 있다. cmd1@pwnable:~$ ls cmd1 cmd1.c flag cmd1@pwnable:~$ cat cmd1.c #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;string.h&amp;gt; int filter(char* cmd){</description>
    </item>
    
    <item>
      <title>pwnable.kr shell shock</title>
      <link>https://appealso.github.io/p/pwnable.kr-shell-shock/</link>
      <pubDate>Sat, 22 Oct 2022 10:06:49 +0900</pubDate>
      
      <guid>https://appealso.github.io/p/pwnable.kr-shell-shock/</guid>
      <description>주어진 경로에 접속하면 아래와 같은 파일이 주어진다. shellshock@pwnable:~$ ls -al total 980 drwxr-x--- 5 root shellshock 4096 Oct 23 2016 . drwxr-xr-x 116 root root 4096 Nov 11 2021 .. -r-xr-xr-x 1 root shellshock 959120 Oct 12 2014 bash d--------- 2 root root 4096 Oct 12 2014 .bash_history -r--r----- 1 root shellshock_pwn 47 Oct</description>
    </item>
    
    <item>
      <title>pwnable.kr bof</title>
      <link>https://appealso.github.io/p/pwnable.kr-bof/</link>
      <pubDate>Sat, 22 Oct 2022 10:02:39 +0900</pubDate>
      
      <guid>https://appealso.github.io/p/pwnable.kr-bof/</guid>
      <description>해당 문제를 실행하면 아래와 같은 코드가 주어진다. #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;string.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;void func(int key){ char overflowme[32]; printf(&amp;#34;overflow me : &amp;#34;); gets(overflowme); // smash me! if(key == 0xcafebabe){ system(&amp;#34;/bin/sh&amp;#34;); } else{ printf(&amp;#34;Nah..\n&amp;#34;); } } int main(int argc, char* argv[]){ func(0xdeadbeef); return 0; } 코드를 보면 gets라는 취약한</description>
    </item>
    
    <item>
      <title>pwnable.kr flag</title>
      <link>https://appealso.github.io/p/pwnable.kr-flag/</link>
      <pubDate>Sat, 22 Oct 2022 10:02:39 +0900</pubDate>
      
      <guid>https://appealso.github.io/p/pwnable.kr-flag/</guid>
      <description>해당 문제를 실행하면 오류가 발생한다. 파일이 패키징되어 있다고 추측이 되었고, 이를 확인하기 위해 아래와같은 명령어를 사용하여 확인하여 upx 패킹이 되어있는 것을</description>
    </item>
    
    <item>
      <title>pwnable.kr collision</title>
      <link>https://appealso.github.io/p/pwnable.kr-collision/</link>
      <pubDate>Sat, 22 Oct 2022 09:59:50 +0900</pubDate>
      
      <guid>https://appealso.github.io/p/pwnable.kr-collision/</guid>
      <description>해당 문제를 실행하면 아래와 같은 코드가 주어진다. #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;string.h&amp;gt;unsigned long hashcode = 0x21DD09EC; unsigned long check_password(const char* p){ int* ip = (int*)p; int i; int res=0; for(i=0; i&amp;lt;5; i++){ res += ip[i]; } return res; } int main(int argc, char* argv[]){ if(argc&amp;lt;2){ printf(&amp;#34;usage : %s [passcode]\n&amp;#34;, argv[0]); return 0; } if(strlen(argv[1]) != 20){ printf(&amp;#34;passcode</description>
    </item>
    
    <item>
      <title>pwnable.kr fd</title>
      <link>https://appealso.github.io/p/pwnable.kr-fd/</link>
      <pubDate>Sat, 22 Oct 2022 09:54:30 +0900</pubDate>
      
      <guid>https://appealso.github.io/p/pwnable.kr-fd/</guid>
      <description>해당 문제를 실행하면 아래와 같은 코드가 주어진다. #include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;string.h&amp;gt;char buf[32]; int main(int argc, char* argv[], char* envp[]){ if(argc&amp;lt;2){ printf(&amp;#34;pass argv[1] a number\n&amp;#34;); return 0; } int fd = atoi( argv[1] ) - 0x1234; int len = 0; len = read(fd, buf, 32); if(!strcmp(&amp;#34;LETMEWIN\n&amp;#34;, buf)){ printf(&amp;#34;good job :)\n&amp;#34;); system(&amp;#34;/bin/cat flag&amp;#34;); exit(0); } printf(&amp;#34;learn about</description>
    </item>
    
    <item>
      <title>[dreamhack] blind-command</title>
      <link>https://appealso.github.io/p/dreamhack-blind-command/</link>
      <pubDate>Fri, 06 May 2022 21:57:09 +0900</pubDate>
      
      <guid>https://appealso.github.io/p/dreamhack-blind-command/</guid>
      <description>[문제] Read the flag file XD [해결법] HTTP GET Method 우회하여 푸는 문제였다 아래 서버 코드를 보면 GET request를 받을 경우 GET 요청이 아닐 경우 커맨드가 실행되는 것을 확인할</description>
    </item>
    
    <item>
      <title>[dreamhack] Mango</title>
      <link>https://appealso.github.io/p/dreamhack-mango/</link>
      <pubDate>Fri, 06 May 2022 21:45:29 +0900</pubDate>
      
      <guid>https://appealso.github.io/p/dreamhack-mango/</guid>
      <description>[문제] 이 문제는 데이터베이스에 저장된 플래그를 획득하는 문제입니다. 플래그는 admin 계정의 비밀번호 입니다. 플래그의 형식은 DH{…} 입니다. {‘uid’</description>
    </item>
    
    <item>
      <title>[dreamhack] session-basic</title>
      <link>https://appealso.github.io/p/dreamhack-session-basic/</link>
      <pubDate>Sun, 13 Feb 2022 11:03:12 +0900</pubDate>
      
      <guid>https://appealso.github.io/p/dreamhack-session-basic/</guid>
      <description>[문제] 쿠키와 세션으로 인증 상태를 관리하는 간단한 로그인 서비스입니다. admin 계정으로 로그인에 성공하면 플래그를 획득할 수 있습니다. [해결법] 이 문제는 admin 세</description>
    </item>
    
    <item>
      <title>[dreamhack] funjs</title>
      <link>https://appealso.github.io/p/dreamhack-funjs/</link>
      <pubDate>Sat, 05 Feb 2022 21:40:29 +0900</pubDate>
      
      <guid>https://appealso.github.io/p/dreamhack-funjs/</guid>
      <description>[문제] 입력 폼에 데이터를 입력하여 맞으면 플래그, 틀리면 NOP !을 출력하는 HTML 페이지입니다. main 함수를 분석하여 올바른 입력 값을 찾아보세요 ! [해결법] 이 문제</description>
    </item>
    
    <item>
      <title>[dreamhack] Carve Party</title>
      <link>https://appealso.github.io/p/dreamhack-carve-party/</link>
      <pubDate>Mon, 31 Jan 2022 16:40:43 +0900</pubDate>
      
      <guid>https://appealso.github.io/p/dreamhack-carve-party/</guid>
      <description>[문제] 할로윈 파티를 기념하기 위해 호박을 준비했습니다! 호박을 10000번 클릭하고 플래그를 획득하세요! [해결법] JavaScript click 이벤트를 10000번 호출 하면</description>
    </item>
    
    <item>
      <title>[dreamhack] simple-ssti</title>
      <link>https://appealso.github.io/p/dreamhack-simple-ssti/</link>
      <pubDate>Mon, 31 Jan 2022 16:13:01 +0900</pubDate>
      
      <guid>https://appealso.github.io/p/dreamhack-simple-ssti/</guid>
      <description>[문제] 존재하지 않는 페이지 방문시 404 에러를 출력하는 서비스입니다. SSTI 취약점을 이용해 플래그를 획득하세요. 플래그는 flag.txt, FLAG 변수에 있습니다. [해결법] URL 뒤</description>
    </item>
    
    <item>
      <title>[dreamhack] login-1</title>
      <link>https://appealso.github.io/p/dreamhack-login-1/</link>
      <pubDate>Mon, 31 Jan 2022 15:42:56 +0900</pubDate>
      
      <guid>https://appealso.github.io/p/dreamhack-login-1/</guid>
      <description>[문제] python으로 작성된 로그인 기능을 가진 서비스입니다. “admin” 권한을 가진 사용자로 로그인하여 플래그를 획득하세요. [해결법] 제공하는</description>
    </item>
    
    <item>
      <title>[dreamhack] web-misconf-1</title>
      <link>https://appealso.github.io/p/dreamhack-web-misconf-1/</link>
      <pubDate>Mon, 31 Jan 2022 14:54:40 +0900</pubDate>
      
      <guid>https://appealso.github.io/p/dreamhack-web-misconf-1/</guid>
      <description>[문제] 여기본 설정을 사용한 서비스입니다. 로그인한 후 Organization에 플래그를 설정해 놓았습니다. [해결법] 문제파일에 admin 정보가 있었다. 접</description>
    </item>
    
    <item>
      <title>[dreamhack] xss-2</title>
      <link>https://appealso.github.io/p/dreamhack-xss-2/</link>
      <pubDate>Tue, 05 Oct 2021 22:28:53 +0900</pubDate>
      
      <guid>https://appealso.github.io/p/dreamhack-xss-2/</guid>
      <description>[문제] 여러 기능과 입력받은 URL을 확인하는 봇이 구현된 서비스입니다. XSS 취약점을 이용해 플래그를 획득하세요. 플래그는 flag.txt, FLAG 변수에 있습니다. [해결법]</description>
    </item>
    
    <item>
      <title>[dreamhack] Tomcat Manager</title>
      <link>https://appealso.github.io/p/dreamhack-tomcat-manager/</link>
      <pubDate>Tue, 05 Oct 2021 21:46:26 +0900</pubDate>
      
      <guid>https://appealso.github.io/p/dreamhack-tomcat-manager/</guid>
      <description>[문제] 드림이가 톰캣 서버로 개발을 시작하였습니다. 서비스의 취약점을 찾아 플래그를 획득하세요. 플래그는 /flag 경로에 있습니다. [해결법] LFI로 tomcat 비밀번</description>
    </item>
    
    <item>
      <title>[dreamhack] crawling</title>
      <link>https://appealso.github.io/p/dreamhack-crawling/</link>
      <pubDate>Tue, 05 Oct 2021 21:40:18 +0900</pubDate>
      
      <guid>https://appealso.github.io/p/dreamhack-crawling/</guid>
      <description>[문제] 드림이는 웹 크롤링 사이트를 구축했습니다. 크롤링 사이트에서 취약점을 찾고 flag를 획득하세요! [해결법] ssrf 우회 기법으로 ipaddress.ip_address(ip)).is_global 우회 [참고] https://umbum.dev/473</description>
    </item>
    
  </channel>
</rss>
